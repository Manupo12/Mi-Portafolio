---
// Tarjeta especializada para mostrar aplicaciones móviles
// Descripción (español): Componente que renderiza una tarjeta enlazable
// para un proyecto de tipo App. Muestra icono, título, descripción,
// estado (badge) y etiquetas.
// Props recibidas via Astro.props:
//   - link (string): URL a la página del proyecto (la tarjeta es un <a>).
//   - iconSrc (string): ruta al icono/imagen de la app.
//   - titulo (string): título del proyecto.
//   - status (string | undefined): estado textual (ej. 'Publicado').
//   - descripcion (string): descripción corta para mostrar en la tarjeta.
//   - tags (string[]): lista de etiquetas/tecnologías.
const { link, iconSrc, titulo, status, descripcion, tags } = Astro.props;

// Variables auxiliares (no cambian la lógica):
// - isPublished: true cuando status === 'Publicado'
// - badgeText: texto mostrado en la insignia
// - badgeClasses: clases Tailwind que estilizan la insignia según estado
const isPublished = status === 'Publicado';
const badgeText = isPublished ? 'Publicado' : 'En Desarrollo';
const badgeClasses = isPublished 
    ? 'bg-emerald-500/20 text-emerald-300 border-emerald-500/30' 
    : 'bg-sky-500/20 text-sky-300 border-sky-500/30';
---
<a href={link} class="relative group block bg-gray-900/50 border border-gray-700/60 rounded-xl p-6 h-full flex flex-col hover:bg-gray-800/60 hover:-translate-y-1 transition-all duration-300">
    <!-- Badge de estado: aparece si existe `status` -->
    {status && (
        <div class={`absolute top-4 right-4 text-xs font-medium px-2.5 py-1 rounded-full border ${badgeClasses}`}>{badgeText}</div>
    )}

    <!-- Contenido principal: icono, título y descripción -->
    <div class="flex-grow">
        {iconSrc && <img src={iconSrc} alt={`Icono de ${titulo}`} class="w-14 h-14 rounded-lg mb-4" />}
        <h3 class="font-bold text-lg text-white group-hover:text-emerald-400 transition-colors">{titulo}</h3>
        <p class="text-sm text-gray-400 mt-2 line-clamp-3">{descripcion}</p>
    </div>
    
    <!-- Sección de etiquetas/tags: mapeamos cada tag a un <span> -->
    <div class="flex flex-wrap gap-2 pt-4 mt-4 border-t border-gray-800">
        {tags.map((tag: string) => (
            <span class="text-xs font-semibold text-emerald-300 bg-emerald-900/50 px-2 py-1 rounded-full">{tag}</span>
        ))}
    </div>
</a>